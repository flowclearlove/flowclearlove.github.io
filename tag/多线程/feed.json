{
    "version": "https://jsonfeed.org/version/1",
    "title": "让风听见 • All posts by \"多线程\" tag",
    "description": "人生不可能总是顺心如意的，但是持续朝着阳光走，影子就会躲在后面。刺眼，却表明对的方向。",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/05/28/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9D%E7%90%86%E8%A7%A3%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2023/05/28/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9D%E7%90%86%E8%A7%A3%E4%BD%BF%E7%94%A8/",
            "title": "python多线程初理解使用",
            "date_published": "2023-05-28T11:34:57.000Z",
            "content_html": "<h2 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h2>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">import threading<br><br>def <span class=\"hljs-built_in\">thread_job</span>():<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;This is an added Thread, number is %s&#x27;</span> %threading.<span class=\"hljs-built_in\">current_thread</span>())<br><br><br>def <span class=\"hljs-built_in\">main</span>():<br>    # 输出激活状态的线程数<br>    # <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-built_in\">print</span>(threading.<span class=\"hljs-built_in\">active_count</span>())<br><br>    # 输出当前激活状态线程的详细信息<br>    # [&lt;<span class=\"hljs-built_in\">_MainThread</span>(MainThread, started <span class=\"hljs-number\">14940</span>)&gt;]<br>    <span class=\"hljs-built_in\">print</span>(threading.<span class=\"hljs-built_in\">enumerate</span>())<br><br>    # 输出正在运行的线程是哪一个<br>    # &lt;<span class=\"hljs-built_in\">_MainThread</span>(MainThread, started <span class=\"hljs-number\">14940</span>)&gt;<br>    <span class=\"hljs-built_in\">print</span>(threading.<span class=\"hljs-built_in\">current_thread</span>())<br><br>    # 新建一个线程<br>    # This is an added Thread, number is &lt;<span class=\"hljs-built_in\">Thread</span>(Thread-<span class=\"hljs-number\">1</span>, started <span class=\"hljs-number\">9948</span>)&gt;<br>    added_thread = threading.<span class=\"hljs-built_in\">Thread</span>(target=thread_job)<br>    added_thread.<span class=\"hljs-built_in\">start</span>()<br>    <br>    <br><br>if __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-built_in\">main</span>()<br></code></pre></td></tr></table></figure>\n<h2 id=\"join方法\"><a class=\"markdownIt-Anchor\" href=\"#join方法\">#</a> join 方法</h2>\n<h3 id=\"不使用join\"><a class=\"markdownIt-Anchor\" href=\"#不使用join\">#</a> 不使用 join</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import threading  <br><span class=\"hljs-keyword\">from</span> time import sleep  <br>  <br>  <br>def thread_job():  <br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 start\\n&#x27;</span>)  <br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(10):  <br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;0.1&#x27;</span>)  <br>sleep(0.1)  <br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 finish\\n&#x27;</span>)  <br>  <br>  <br>def main():  <br>added_thread = threading.Thread(<span class=\"hljs-attribute\">target</span>=thread_job, <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">&quot;T1&quot;</span>)  <br>added_thread.start()  <br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;all done\\n&#x27;</span>)  <br>  <br>  <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <br>main()<br></code></pre></td></tr></table></figure>\n<h4 id=\"输出\"><a class=\"markdownIt-Anchor\" href=\"#输出\">#</a> 输出</h4>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">T1</span> start<br><span class=\"hljs-attribute\">all</span> done<br><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">T1</span> finish<br></code></pre></td></tr></table></figure>\n<h3 id=\"使用join\"><a class=\"markdownIt-Anchor\" href=\"#使用join\">#</a> 使用 join</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">import threading<br><span class=\"hljs-selector-tag\">from</span> <span class=\"hljs-selector-tag\">time</span> import sleep<br><br>def thread_job():<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 start\\n&#x27;</span>)<br>    for i in <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">0.1</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 finish\\n&#x27;</span>)<br><br>def <span class=\"hljs-built_in\">main</span>():<br>    added_thread = threading.<span class=\"hljs-built_in\">Thread</span>(target=thread_job, name=<span class=\"hljs-string\">&quot;T1&quot;</span>)<br>    added_thread.<span class=\"hljs-built_in\">start</span>()<br>    added_thread.<span class=\"hljs-built_in\">join</span>() # 随后的语句将被阻塞<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;all done\\n&#x27;</span>)<br>    <br>if __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-built_in\">main</span>()<br></code></pre></td></tr></table></figure>\n<h4 id=\"输出-2\"><a class=\"markdownIt-Anchor\" href=\"#输出-2\">#</a> 输出</h4>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">T1</span> start<br><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">0</span>.<span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">T1</span> finish<br><br><span class=\"hljs-attribute\">all</span> done<br></code></pre></td></tr></table></figure>\n<h3 id=\"双线程模型\"><a class=\"markdownIt-Anchor\" href=\"#双线程模型\">#</a> 双线程模型</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import threading<br><span class=\"hljs-keyword\">from</span> time import sleep<br><br>def thread_job():<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 start\\n&#x27;</span>)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(10):<br>        sleep(0.1)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 finish\\n&#x27;</span>)<br><br><span class=\"hljs-comment\"># 一个执行较快的函数</span><br>def T2_job():<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T2 start\\n&#x27;</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T2 finish\\n&#x27;</span>)<br><br>def main():<br>    added_thread = threading.Thread(<span class=\"hljs-attribute\">target</span>=thread_job, <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">&quot;T1&quot;</span>)<br>    thread_2 = threading.Thread(<span class=\"hljs-attribute\">target</span>=T2_job, <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">&quot;T2&quot;</span>)<br>    added_thread.start()<br>    thread_2.start()<br>    added_thread.join() # 随后的语句将被阻塞<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;all done\\n&#x27;</span>)<br>    <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>\n<h4 id=\"输出-3\"><a class=\"markdownIt-Anchor\" href=\"#输出-3\">#</a> 输出</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-built_in\">T1</span> start<br><br><span class=\"hljs-built_in\">T2</span> start<br><br><span class=\"hljs-built_in\">T2</span> finish<br><br><span class=\"hljs-built_in\">T1</span> finish<br><br>all done<br></code></pre></td></tr></table></figure>\n<p><strong>即便是运行较快的线程，只要不阻塞，其优先级也会低于主线程：</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import threading<br><span class=\"hljs-keyword\">from</span> time import sleep<br><br>def thread_job():<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 start\\n&#x27;</span>)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(10):<br>        sleep(0.1)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T1 finish\\n&#x27;</span>)<br><br><span class=\"hljs-comment\"># 一个执行较快的函数</span><br>def T2_job():<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T2 start\\n&#x27;</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;T2 finish\\n&#x27;</span>)<br><br>def main():<br>    added_thread = threading.Thread(<span class=\"hljs-attribute\">target</span>=thread_job, <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">&quot;T1&quot;</span>)<br>    thread_2 = threading.Thread(<span class=\"hljs-attribute\">target</span>=T2_job, <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">&quot;T2&quot;</span>)<br>    added_thread.start()<br>    added_thread.join() # 随后的语句将被阻塞<br>    thread_2.start()<br>    # thread_2.join() # 随后的语句将被阻塞<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;all done\\n&#x27;</span>)<br>    <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br><br><br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-built_in\">T1</span> start<br><br><span class=\"hljs-built_in\">T1</span> finish<br><br><span class=\"hljs-built_in\">T2</span> start<br>all done<br><br><br><span class=\"hljs-built_in\">T2</span> finish<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"queue功能\"><a class=\"markdownIt-Anchor\" href=\"#queue功能\">#</a> Queue 功能</h2>\n<p>由于多线程没有返回值，我们可以将其运算结果放在一个队列中，随后每个线程的队列到主线程中后即可取出数据。</p>\n<p>以计算列表中每个元素值的平方为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">from</span> queue <span class=\"hljs-keyword\">import</span> Queue<br><br><span class=\"hljs-comment\"># 二次方的实现</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">job</span>(<span class=\"hljs-params\">l,q</span>):<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(l)):<br>        l[i] = l[i] ** <span class=\"hljs-number\">2</span><br>    q.put(l)<br><br><span class=\"hljs-comment\"># 多线程模块</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">multithreading</span>():<br>    <span class=\"hljs-comment\"># 定义队列（放返回值以取代return）</span><br>    q = Queue()<br>    <span class=\"hljs-comment\"># 所有的线程放入本列表</span><br>    threads = []<br>    data = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>]]<br>    <span class=\"hljs-comment\"># 定义4个线程</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">4</span>):<br>        <span class=\"hljs-comment\"># 设定线程并对每个线程传进去一个子列表和全局队列</span><br>        t = threading.Thread(target=job, args=(data[i], q))<br>        <span class=\"hljs-comment\"># 启动线程</span><br>        t.start()<br>        <span class=\"hljs-comment\"># 加入到所有线程中</span><br>        threads.append(t)<br>    <span class=\"hljs-comment\"># 阻塞每一个线程以实现异步(需要并发而不是依次执行)</span><br>    <span class=\"hljs-keyword\">for</span> thread <span class=\"hljs-keyword\">in</span> threads:<br>        thread.join()<br>    <span class=\"hljs-comment\"># 定义空列表(用来存每一个线程返回过来的值)</span><br>    results = []<br>    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">4</span>):<br>        <span class=\"hljs-comment\"># 按顺序从q中取出值存到results</span><br>        results.append(q.get())<br>    <span class=\"hljs-built_in\">print</span>(results)<br>    <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    multithreading()<br></code></pre></td></tr></table></figure>\n<h2 id=\"全局解释锁\"><a class=\"markdownIt-Anchor\" href=\"#全局解释锁\">#</a> 全局解释锁</h2>\n<p>Python 的多线程，只有用于 I/O 密集型程序时效率才会有明显的提高。</p>\n<p>原因如下：</p>\n<p>Python 代码的执行是由 Python 虚拟机进行控制。它在主循环中同时只能有一个控制线程在执行，意思就是 Python 解释器中可以运行多个线程，但是在执行的只有一个线程，其他的处于等待状态。</p>\n<p>这些线程执行是有全局解释器锁（GIL）控制，它来保证同时只有一个线程在运行。在多线程运行环境中，Python 虚拟机执行方式如下：</p>\n<p>设置 GIL<br>\n 切换进线程<br>\n执行下面操作之一<br>\n​ 1. 运行指定数量的字节码指令</p>\n<p>2. 线程主动让出控制权</p>\n<p>切换出线程（线程处于睡眠状态）<br>\n解锁 GIL<br>\n 进入 1 步骤</p>\n<blockquote>\n<p><code>Python</code>  运行计算密集型的多线程程序时，更倾向于让线程在整个时间片内始终占据 <code>GIL</code> ，而 <code>I/O</code>  秘籍型的多线程程序在 I/O 被调用前会释放 <code>GIL</code> ，以允许其他线程在 <code>I/O</code>  执行的时候运行。<br>\n<strong>下面这段示例运行时多线程未必胜得过单线程：</strong></p>\n</blockquote>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">import threading<br>import <span class=\"hljs-selector-tag\">time</span><br>import copy<br><span class=\"hljs-selector-tag\">from</span> queue import Queue<br><br>def job(l, <span class=\"hljs-selector-tag\">q</span>):<br>    res = <span class=\"hljs-built_in\">sum</span>(l)<br>    q.<span class=\"hljs-built_in\">put</span>(res)<br>def <span class=\"hljs-built_in\">multithreading</span>(l):<br>    q = <span class=\"hljs-built_in\">Queue</span>()<br>    threads = []<br>    for i in <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">4</span>):<br>        t = threading.<span class=\"hljs-built_in\">Thread</span>(target=job, args=(copy.<span class=\"hljs-built_in\">copy</span>(l),q),name=<span class=\"hljs-string\">&#x27;T%i&#x27;</span>%i)<br>        t.<span class=\"hljs-built_in\">start</span>()<br>        threads.<span class=\"hljs-built_in\">append</span>(t)<br>    [t.<span class=\"hljs-built_in\">join</span>() for t in threads]<br>    total = <span class=\"hljs-number\">0</span><br>    for _ in <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">4</span>):<br>        total += q.<span class=\"hljs-built_in\">get</span>()<br>    <span class=\"hljs-built_in\">print</span>(total)<br><br>def <span class=\"hljs-built_in\">normal</span>(l):<br>    total = <span class=\"hljs-built_in\">sum</span>(l)<br>    <span class=\"hljs-built_in\">print</span>(total)<br><br>if __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    l = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1000000</span>))<br>    s_t=time.<span class=\"hljs-built_in\">time</span>()<br>    <span class=\"hljs-built_in\">normal</span>(l*<span class=\"hljs-number\">4</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;normal:&#x27;</span>,time.<span class=\"hljs-built_in\">time</span>()-s_t)<br>    s_t=time.<span class=\"hljs-built_in\">time</span>()<br>    <span class=\"hljs-built_in\">multithreading</span>(l)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;multithreading:&#x27;</span>,time.<span class=\"hljs-built_in\">time</span>()-s_t)<br><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"lock线程锁\"><a class=\"markdownIt-Anchor\" href=\"#lock线程锁\">#</a> Lock 线程锁</h2>\n<p>第一个线程处理完再开始第二个线程（针对 shared memory 场景）</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-function\">import threading</span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\">def <span class=\"hljs-title\">job1</span>():</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">global</span> A, <span class=\"hljs-keyword\">lock</span></span><br><span class=\"hljs-function\">    # 打开线程锁</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">lock</span>.<span class=\"hljs-title\">acquire</span>()</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">10</span></span>):</span><br><span class=\"hljs-function\">        A +</span>= <span class=\"hljs-number\">1</span><br>        print(<span class=\"hljs-string\">&#x27;job1&#x27;</span>, A)<br>    <span class=\"hljs-meta\"># 关闭线程锁</span><br>    <span class=\"hljs-keyword\">lock</span>.release()<br><br><span class=\"hljs-function\">def <span class=\"hljs-title\">job2</span>():</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">global</span> A, <span class=\"hljs-keyword\">lock</span></span><br><span class=\"hljs-function\">    # 打开线程锁</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">lock</span>.<span class=\"hljs-title\">acquire</span>()</span><br><span class=\"hljs-function\">    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">10</span></span>):</span><br><span class=\"hljs-function\">        A +</span>= <span class=\"hljs-number\">10</span><br>        print(<span class=\"hljs-string\">&#x27;job2&#x27;</span>, A)<br>    <span class=\"hljs-meta\"># 关闭线程锁</span><br>    <span class=\"hljs-keyword\">lock</span>.release()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-keyword\">lock</span> = threading.Lock()<br>    A = <span class=\"hljs-number\">0</span><br>    t1 = threading.Thread(target=job1)<br>    t2 = threading.Thread(target=job2)<br>    t1.start()<br>    t2.start()<br>    t1.<span class=\"hljs-keyword\">join</span>()<br>    t2.<span class=\"hljs-keyword\">join</span>()<br></code></pre></td></tr></table></figure>\n<h3 id=\"输出-4\"><a class=\"markdownIt-Anchor\" href=\"#输出-4\">#</a> 输出</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">3</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">5</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">6</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">7</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">8</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">9</span><br><span class=\"hljs-attribute\">job1</span> <span class=\"hljs-number\">10</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">20</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">30</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">40</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">50</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">60</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">70</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">90</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">100</span><br><span class=\"hljs-attribute\">job2</span> <span class=\"hljs-number\">110</span><br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "多线程"
            ]
        }
    ]
}